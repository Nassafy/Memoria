{"version":3,"sources":["modules/NumDisplay.js","utils/formatPhoneNumber.js","modules/ButtonNext.js","modules/Stage0.js","modules/NumInput.js","modules/Stage1.js","modules/Score.js","modules/Stage2.js","utils/generateRandomNums.js","modules/App.js","serviceWorker.js","index.js"],"names":["NumDisplay","props","num","replace","trim","react_default","a","createElement","className","ButtonNext","onClick","text","Stage0","Fragment","NumInput","value","onChange","handleChange","Stage1","e","Score","max","Stage2","getRandomNum","end","Math","floor","random","concat","generateRandomNums","size","i","arr","push","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nums","getNums","state","numIndex","stage","currentNum","numArray","answerNumArray","goodNum","onCLickNextStage0","bind","assertThisInitialized","onCLickNextStage1","setState","length","scoreAdd","answerNums","slice","target","_this2","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_modules_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e5920b9.chunk.js","sourcesContent":["import React from \"react\";\nimport formatNum from \"../utils/formatPhoneNumber.js\";\nexport default props => {\n  const num = formatNum(props.num);\n  return (\n    <div className=\"NumDispay\">\n      <p>{num}</p>\n    </div>\n  );\n};\n","export default phoneNumber => {\n  return phoneNumber.replace(/(\\d{2})/g, \"$1 \").trim();\n};\n","import React from \"react\";\n\nexport default props => {\n  return <button onClick={props.onClick}>{props.text}</button>;\n};\n","import React, { Component } from \"react\";\nimport NumDisplay from \"./NumDisplay.js\";\nimport ButtonNext from \"./ButtonNext.js\";\n\nexport default props => {\n  return (\n    <>\n      <NumDisplay num={props.num} />\n      <ButtonNext text=\"next\" onClick={props.onClick} />\n    </>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n  return (\n    <div>\n      <input value={props.value} onChange={props.handleChange} />\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport NumInput from \"./NumInput.js\";\nimport ButtonNext from \"./ButtonNext.js\";\n\nexport default props => {\n  return (\n    <>\n      <NumInput value={props.value} handleChange={e => props.handleChange(e)} />\n      <ButtonNext text=\"next\" onClick={props.onClick} />\n    </>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n  return (\n    <div>\n      <p>\n        Score: {props.value} / {props.max}\n      </p>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport Score from \"./Score.js\";\n\nexport default props => {\n  return (\n    <>\n      <Score value={props.value} max={props.max} />\n    </>\n  );\n};\n","let getRandomNum = () => {\n  let i;\n  let end = Math.floor(Math.random() * 999999999);\n  return \"0\".concat(end);\n};\n\nexport default size => {\n  let i;\n  let arr = [];\n  for (i = 0; i < size; i++) {\n    arr.push(getRandomNum());\n  }\n  return arr;\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Stage0 from \"./Stage0.js\";\nimport Stage1 from \"./Stage1.js\";\nimport Stage2 from \"./Stage2.js\";\nimport getNums from \"../utils/generateRandomNums.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    let nums = getNums(5);\n    this.state = {\n      numIndex: 0,\n      stage: 0,\n      currentNum: \"\",\n      numArray: nums,\n      answerNumArray: [],\n      goodNum: 0\n    };\n    this.onCLickNextStage0 = this.onCLickNextStage0.bind(this);\n    this.onCLickNextStage1 = this.onCLickNextStage1.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  onCLickNextStage0() {\n    this.setState({ numIndex: this.state.numIndex + 1 });\n    if (this.state.numIndex >= this.state.numArray.length - 1) {\n      this.setState({\n        stage: 1,\n        numIndex: 0\n      });\n    }\n  }\n\n  onCLickNextStage1() {\n    let i = this.state.numIndex;\n    let scoreAdd = this.state.numArray[i] === this.state.currentNum ? 1 : 0;\n    let answerNums = this.state.answerNumArray.slice();\n    answerNums.push(this.state.currentNum);\n    this.setState({\n      answerNumArray: answerNums,\n      goodNum: this.state.goodNum + scoreAdd,\n      numIndex: this.state.numIndex + 1,\n      currentNum: \"\"\n    });\n    if (this.state.numIndex >= this.state.numArray.length - 1) {\n      this.setState({ stage: 2 });\n    }\n  }\n\n  handleChange(e) {\n    this.setState({ currentNum: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Memoria </h1>\n        {this.state.stage === 0 && (\n          <Stage0\n            num={this.state.numArray[this.state.numIndex]}\n            onClick={this.onCLickNextStage0}\n          />\n        )}\n        {this.state.stage === 1 && (\n          <Stage1\n            value={this.state.currentNum}\n            handleChange={e => this.handleChange(e)}\n            onClick={this.onCLickNextStage1}\n          />\n        )}\n        {this.state.stage === 2 && (\n          <Stage2 value={this.state.goodNum} max={this.state.numArray.length} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./modules/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}